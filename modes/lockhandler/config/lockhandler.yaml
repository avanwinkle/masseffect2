#config_version=5

#####
# LOCKHANDLER MODE
#
# This is a game logic mode to handle the complex logic of balls entering the
# ball device (bd_lock) via the left ramp.
#
# Most of the logic is handled in a custom Python class (lockhandler.py). This
# yaml file instantiates that class, sets up an event listener to trigger the
# class handler.
#####

mode:
  start_events: start_mode_lockhandler
  stop_events: ball_will_end
  code: lockhandler.LockHandler
  priority: 1000

mode_settings:
  ball_device: bd_lock
  lock_device: fmball_lock

event_player:
  s_left_ramp_exit_active: lockhandler_check_bypass

# Dont start mission select until all queued widgets have cleared
queue_event_player:
  lockhandler_start_missionselect:
    queue_event: lockhandler_queue_missionselect
    events_when_finished: start_mode_missionselect

queue_relay_player:
  balldevice_bd_lock_ball_eject_attempt.1{mode.missionselect.active}:
    post: blocking_balldevice_bd_lock_ball_eject_attempt
    wait_for: mode_missionselect_will_stop
  balldevice_bd_trough_ball_eject_attempt.1{mode.missionselect.active}:
    post: blocking_balldevice_bd_trough_eject_attempt
    wait_for: mode_missionselect_will_stop
  lockhandler_queue_missionselect:
    post: check_slide_queue
    wait_for: slide_queue_clear

# This lock needs to be here in lockhandler.yaml in order to be found in self.mode_devices
multiball_locks:
  fmball_lock:
    balls_to_lock: 3
    balls_to_replace: 2
    lock_devices: bd_lock
    reset_count_for_current_player_events: fmball_stopped, mode_collectorship_base_started
    enable_events: enable_fmball_lock
    disable_events: multiball_lock_fmball_lock_locked_ball, mode_collectorship_base_started
    debug: true
