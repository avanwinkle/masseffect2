#config_version=5

#####
# LOCKHANDLER MODE
#
# This is a game logic mode to handle the complex logic of balls entering the
# ball device (bd_lock) via the left ramp. It is specific to the Stern
# Game of Thrones hardware, which uses the same ball device for mission select
# and locking balls.
#
# For the FAST hardware configuration, see airlock.yaml
#
# Most of the logic is handled in a custom Python class (lockhandler.py). This
# yaml file instantiates that class, sets up an event listener to trigger the
# class handler.
#####

mode:
  start_events: start_mode_lockhandler
  stop_events: ball_will_end
  code: lockhandler.LockHandler
  priority: 1000

mode_settings:
  ball_device: bd_lock
  lock_device: fmball_lock

event_player:
  s_left_ramp_exit_active: lockhandler_check_bypass
  lockhandler_start_missionselect: start_mode_missionselect
  # Relay these events to be agnostic with airlock
  lockhandler_overlord_ball_will_lock:
    overlord_ball_will_lock:
      total_balls_locked:
        value: total_balls_locked
        type: int
  lockhandler_arrival_ball_will_lock:
    arrival_ball_will_lock:
      total_balls_locked:
        value: total_balls_locked
        type: int

queue_relay_player:
  balldevice_bd_lock_ball_eject_attempt.1{mode.missionselect.active or mode.missionselect._starting}:
    post: blocking_balldevice_bd_lock_ball_eject_attempt
    wait_for: mode_missionselect_will_stop
  balldevice_bd_trough_ball_eject_attempt.1{mode.missionselect.active or mode.missionselect._starting}:
    post: blocking_balldevice_bd_trough_eject_attempt
    wait_for: mode_missionselect_will_stop
  mode_missionselect_starting:
    post: check_slide_queue
    wait_for: slide_queue_clear


ball_holds:
  missionselect_hold:
    balls_to_hold: 1
    hold_devices: bd_lock
    debug: true
    enable_events:
      - enable_airlock_missionselect_hold
      # Listen directly to this event, for expediency
      - s_left_ramp_exit_active{mode.field.active and (current_player.status_garrus==2 or current_player.status_samara==2)}
    disable_events:
      - mode_field_stopped
      - mode_missionselect_stopped
      # Always compare player_num because players can get added during others' turns
      - player_available_missions{player_num==current_player.number and value<=0}
    release_all_events:
      - mission_intro_complete
      - emergency_disable_hold
  suicide_hold:
    balls_to_hold: 1
    hold_devices: bd_lock
    debug: true
    enable_events: enable_transition_hold
    disable_events: mode_suicide_huddle_will_stop
    release_all_events: release_suicide_hold
  captive_hold:
    balls_to_hold: 1
    debug: true
    hold_devices: bd_lock
    enable_events: enable_captive
    disable_events: disable_captive
    release_all_events: release_captive, disable_captive
  store_hold:
    balls_to_hold: 1
    debug: true
    hold_devices: bd_lock
    # TODO: Use the storeshot shot enabled/disabled to prevent duplication of conditions?
    enable_events:
      - enable_store
      - mode_field_started{current_player.store_enabled>0}
    disable_events:
      - store_complete
      - stop_mode_field
    release_all_events: store_complete
  arrival_hold:
    balls_to_hold: 3
    hold_devices: bd_lock
    enable_events: enable_arrival_hold
    disable_events: mode_arrival_stopped
    release_one_events: arrival_release_one


# This lock needs to be here in lockhandler.yaml in order to be found in self.mode_devices
multiball_locks:
  fmball_lock:
    balls_to_lock: 3
    balls_to_replace: 2
    lock_devices: bd_lock
    reset_count_for_current_player_events: fmball_stopped, mode_collectorship_base_started
    enable_events: enable_fmball_lock
    disable_events: multiball_lock_fmball_lock_locked_ball, mode_collectorship_base_started
    debug: true
